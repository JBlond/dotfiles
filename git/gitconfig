[alias]
	alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
	br = branch
	# Delete all local branches but master and the current one.
	br-delete-useless-force = "!f(){ git branch | grep -v "master" | grep -v "development" |grep -v ^* | xargs git branch -D; }; f"
	branches = "!git list-branches"
	changes = diff --name-status -r
	ci = commit
	cl = clone
	cm = commit
	cma = commit -a -m
	cmap = "!f() { git commit -a -m \"$@\" && git push; }; f"
	cmapu = "!f() { git commit -a -m \"update\" && git push; }; f"
	co = checkout
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	development = checkout development
	email = config user.email
	github = !git config user.name "JBlond" && git config user.email "leet31337@web.de"
	incoming = !git remote update -p; git log ..@{u}
	judas = blame
	last = log -1 --stat
	lc = diff @~..@
	last-commit = "!git lc"
	last-tag = describe --tags --abbrev=0
	lg = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %C(bold blue)<%an>%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold yellow)%d ‚üπ %C(white)%s %C(bold blue)%an%C(reset) %C(bold green)%cD%C(reset)'
	lg3 = log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)"
	list-branches = show-branch -a --topics
	master = checkout master
	name = config user.name
	new-branch = checkout -b
	open = "!f() { REPO_URL=$(git config remote.origin.url); explorer ${REPO_URL%%.git}; }; f"
	# open 2 for linux
	# open2  = "!f() { URL=$(git config remote.${1-origin}.url | sed -e 's#^.*@#https://#' -e 's#.git$##' -e 's#:#/#2'); git web--browse $URL; }; f"
	patch = !git --no-pager diff --no-color
	remotes = remote -v
	remove-ignored = clean -fX
	rename = mv
	rollback = checkout @~1
	shallow = clone --depth 1
	shallow-branch = clone --depth 1 -b
	st = status -sb
	su = submodule update --recursive --remote
	untracked = ls-files --others --exclude-standard
	undo = reset --hard
	week = log --stat --since='1 Week Ago' --graph --pretty=oneline --abbrev-commit --date=relative
	who = shortlog -s --
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
	wlog = log --stat --since='1 Week Ago' --graph --pretty=oneline --abbrev-commit --date=relative
	# show detail view with a structure in log
	wow = "log --all --graph --decorate --oneline --simplify-by-decoration"

[color]
	ui = true

[color "diff-highlight"]
	newHighlight = green bold 22
	newNormal = green bold
	oldHighlight = red bold 52
	oldNormal = red bold

[color "diff"]
	commit = 227 bold
	frag = magenta bold
	meta = 227
	new = green bold
	old = red bold
	whitespace = red reverse

[commit]
	template = ~/dotfiles/git/gitmessage.txt

[core]
	autocrlf = input
	editor = vim
	filemode = false
	fscache = true
	pager = ~/dotfiles/git/diff-so-fancy | less --tabs=4 -RFX
	preloadindex = true
	trustctime = false

[diff]
	# tells Git to detect renames. If set to any boolean value, it will enable basic rename detection. 
	# If set to "copies" or "copy", it will detect copies, as well.
	renames = copies

[gc]
	auto = 256

[grep]
	lineNumber = true

[help]
	autocorrect = 1

[merge]
	ff = false
	tool = vimdiff

[mergetool]
	keeptemporaries = false
	keepbackups = false
	prompt = false
	trustexitcode = false

[pull]
	ff = only

[push]
	default = simple
	# whenever pushing, also push local tags
	followTags = true

[user]
	useConfigOnly = true
